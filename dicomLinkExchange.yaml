openapi: 3.0.0

info:
  title: DLX API
  description: Prototype of the DICOM Link Exchange (DLX) initiative. The API represents the outcome of an initiative of medical imaging software manufactures to standardize downloads from their systems.
  version: "0.9"

servers:
  - url: /dlx/v1
    description: Demo server
    
paths:
  /api_info:
    description: Provides information on version and implemented capabilities of the api
    get:
      responses:
        "200":
          description: A JSON string representing information about the api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiInfo'

  /token/{id}:
    description: The initial call which accepts only the token (e.g. from a qr-code) and responds with the 2FA questions for the calling system to generate a JWT for all further requests. To enhance security, this call always returns successfully, even if the token id does not actually exist. The feedback about failed or successful authentication will be presented by the subsequent /tokentfa/{id} endpoint. To enable the DLX functionalities the HTTP header parameter X-DLX-API is required. This allowes pre-existing token-URLs to forward to this api endpoint (e.g. https://example.com/portal?token={id} with a HTTP header X-DLX-API should return the same result as the defined DLX endpoint https://example.com/dlx/v1/token/{id}) 
    get:
      parameters:
        - in: header
          name: X-DLX-API # optional, and used to activate the DLX API functionality
          schema: 
            type: string # header must exists but will not be evaluated
        - in: path
          name: id
          description: Token id which identifies the download package, e.g. an alpha numerical code
          required: true
          schema:
            type: string 
      responses:
        "200":
          description: Returns the 2FA questions in JSON format. If the token id does not exist, a default question scheme is returned, e.g. to query the date of birth.
          content:
            application/json:
                schema:
                    $ref: '#/components/schemas/tfaQuestions'
          
  /tokentfa/{id}:
    description: Request to answer the 2FA questions from the initial token call. The questions and answers are mapped by their questionId. 
    post:
      parameters:
        - in: path
          name: id
          description: Token which identifies the download package, e.g. an alpha numerical code
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tfaAnswers'
        required: true
      responses:
        "200":
          description: Response with valid JWT
          content:
            application/jwt:
              schema:
                type: string
        "401":
          description: Authentication failed. Token does not exist or additional factors do not match.
        "403":
          description: Authentication failed. Token expired. This errorcode allowes implementing clients to display a specific error message for this unique usecase where everything is correct but the token has expired. Every other error should result in error code 401.

  /list:
    description: Returns a list of the metadata of all available medical data items
    get:
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of medical data items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataItems'
        "401":
          $ref: '#/components/responses/invalidCredentials'

  /download/{id}:
    description: Downloads the file(s) of the data item for the given id
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Id which identifies the data item
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns the file of the data item as binary stream. If the data item contains multiple files (e.g. DICOM study), a zip file stream is returned
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/invalidDataItemId'
        "401":
          $ref: '#/components/responses/invalidCredentials'
        "503":
          $ref: '#/components/responses/comebackLater'

  /downloadall:
    description: Download all data items
    get:
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns all files of all data items in a zip file stream
          content:
            application/zip:
              schema:
                type: string
                format: binary
        "401":
          $ref: '#/components/responses/invalidCredentials'
        "503":
          $ref: '#/components/responses/comebackLater'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # optional, for documentation purposes only

  schemas:
    apiInfo:
        type: object
        required:
          - dlxVersion
          - apiBasePath
        properties:
            dlxVersion:
                type: string
            vendorInformation:
                type: string
            apiBasePath:
                type: string
        example:
            dlxVersion: v1
            vendorInformation: DLX Company Ltd.
            apiBasePath: https://example.com/portal/dlx/v1

    tfaQuestions:
        type: object
        properties: 
            apiInfo:
                type: array
                items:
                    $ref: '#/components/schemas/apiInfo'
            tfaQuestion:
                type: array
                items:
                    $ref: '#/components/schemas/tfaQuestion'

    tfaQuestion:
        type: object
        properties:
            question:
                type: string
            questionId:
                type: string
            questionType:
                type: string
                enum: [PAT_BIRTH_DATE, STUDY_DATE, KV_NUMBER, CUSTOM]
                description: |
                    Format:
                    * `PAT_BIRTH_DATE` - e.g. date from dicom: Patient's Birth Date (0010,0030)
                    * `STUDY_DATE` - e.g. date from dicom: Study Date (0008,0020)
                    * `KV_NUMBER` - as string
                    * `CUSTOM` - any custom value which is not specified above
            answerFormat:
                type: string
                enum: [DATE, STRING]
                description: |
                    Format:
                    * `DATE` - date formated as YYYYMMDD
                    * `STRING` - arbitrary string
        example:
            question: Wann haben Sie Geburtstag?
            questionId: 1
            questionType: PAT_BIRTH_DATE
            answerFormat: DATE
    
    tfaAnswers:
        type: object
        properties: 
            tfaAnswer:
                type: array
                items:
                    $ref: '#/components/schemas/tfaAnswer'

    tfaAnswer:    
        type: object
        properties:
          questionId:
            type: string
          answer:
            type: string
        example:
            questionId: 1
            answer: 19700101
              
    dataItems:
      type: object
      properties: 
        dataItem:
          type: array
          items:
            $ref: '#/components/schemas/dataItem'

    dataItem:
      type: object
      required:
        - id
        - mimeType
        - name
      properties:
        id:                
          type: string
        mimeType:           # application/dicom, application/pdf, ...
          type: string
        name:               # dicom: studyDescription (0008,1030)
          type: string
        studyInstanceUID:   # dicom: studyInstanceUID (0020,000D)
          type: string
        date:               # dicom: studyDate (0008,0020)
          type: string
          format: date   
        modalities:         
          type: string  
        patientsSex:        # dicom: patientsSex (0010,0040)
          type: string   
        patientsName:       # dicom: patientsName (0010,0010)
          type: string
        patientsBirthdate:  # dicom: patientsBirthdate (0010,0030)
          type: string 
          format: date
        fileCount:
          type: integer 

    comebackLaterResponse:
      type: object
      nullable: true
      properties:
        timeOutInSeconds:
          type: integer
          minimum: 0
      example:
        timeOutInSeconds: 30

  responses:
    invalidCredentials:
      description: invalid credentials provided - use /token and /tokentfa before

    comebackLater:
      description: If the server is busy, a 503 status code means "please come back later"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/comebackLaterResponse'

    invalidDataItemId:
      description: If the study or report for the given dataItemId is unknown